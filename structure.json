{
  "src": {
    "config": {
      "database.js": "const mysql = require('mysql2/promise');\r\nrequire('dotenv').config();\r\n\r\nconst pool = mysql.createPool({\r\n  host: process.env.DB_HOST,\r\n  user: process.env.DB_USER,\r\n  password: process.env.DB_PASSWORD,\r\n  database: process.env.DB_NAME,\r\n  waitForConnections: true,\r\n  connectionLimit: 10,\r\n  queueLimit: 0\r\n});\r\n\r\nmodule.exports = pool;"
    },
    "controllers": {
      "categorias.controller.js": "const Categoria = require('../models/categoria.model');\r\n\r\nexports.getAllCategorias = async (req, res) => {\r\n  try {\r\n    const categorias = await Categoria.getAll();\r\n    res.status(200).json(categorias);\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error al obtener categorías' });\r\n  }\r\n};\r\n\r\nexports.getCategoriaById = async (req, res) => {\r\n  try {\r\n    const categoria = await Categoria.getById(req.params.id);\r\n    if (!categoria) {\r\n      return res.status(404).json({ message: 'Categoría no encontrada' });\r\n    }\r\n    res.status(200).json(categoria);\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error al obtener la categoría' });\r\n  }\r\n};\r\n\r\nexports.createCategoria = async (req, res) => {\r\n  try {\r\n    // Validación básica\r\n    if (!req.body.nombre || !req.body.slug) {\r\n      return res.status(400).json({ message: 'El nombre y el slug son obligatorios' });\r\n    }\r\n    \r\n    const id = await Categoria.create(req.body);\r\n    res.status(201).json({ id, ...req.body });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error al crear la categoría' });\r\n  }\r\n};\r\n\r\nexports.updateCategoria = async (req, res) => {\r\n  try {\r\n    // Validación básica\r\n    if (!req.body.nombre || !req.body.slug) {\r\n      return res.status(400).json({ message: 'El nombre y el slug son obligatorios' });\r\n    }\r\n    \r\n    const result = await Categoria.update(req.params.id, req.body);\r\n    if (result === 0) {\r\n      return res.status(404).json({ message: 'Categoría no encontrada' });\r\n    }\r\n    res.status(200).json({ id: req.params.id, ...req.body });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error al actualizar la categoría' });\r\n  }\r\n};\r\n\r\nexports.deleteCategoria = async (req, res) => {\r\n  try {\r\n    const result = await Categoria.delete(req.params.id);\r\n    if (result === 0) {\r\n      return res.status(404).json({ message: 'Categoría no encontrada' });\r\n    }\r\n    res.status(200).json({ message: 'Categoría eliminada correctamente' });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error al eliminar la categoría' });\r\n  }\r\n};",
      "especificaciones.controller.js": "const Especificacion = require('../models/especificacion.model');\r\n\r\nexports.getEspecificacionesByProducto = async (req, res) => {\r\n  try {\r\n    const especificaciones = await Especificacion.getByProducto(req.params.productoId);\r\n    res.status(200).json(especificaciones);\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error al obtener especificaciones del producto' });\r\n  }\r\n};\r\n\r\nexports.getEspecificacionById = async (req, res) => {\r\n  try {\r\n    const especificacion = await Especificacion.getById(req.params.id);\r\n    if (!especificacion) {\r\n      return res.status(404).json({ message: 'Especificación no encontrada' });\r\n    }\r\n    res.status(200).json(especificacion);\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error al obtener la especificación' });\r\n  }\r\n};\r\n\r\nexports.createEspecificacion = async (req, res) => {\r\n  try {\r\n    // Validación básica\r\n    if (!req.body.nombre || !req.body.valor || !req.params.productoId) {\r\n      return res.status(400).json({ \r\n        message: 'El nombre, valor y ID del producto son obligatorios' \r\n      });\r\n    }\r\n    \r\n    // Asegúrate de que el producto_id se asigne correctamente\r\n    const especificacion = {\r\n      ...req.body,\r\n      producto_id: req.params.productoId\r\n    };\r\n    \r\n    const id = await Especificacion.create(especificacion);\r\n    res.status(201).json({ id, ...especificacion });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error al crear la especificación' });\r\n  }\r\n};\r\n\r\nexports.updateEspecificacion = async (req, res) => {\r\n  try {\r\n    // Validación básica\r\n    if (!req.body.nombre || !req.body.valor) {\r\n      return res.status(400).json({ message: 'El nombre y valor son obligatorios' });\r\n    }\r\n    \r\n    const especificacion = {\r\n      nombre: req.body.nombre,\r\n      valor: req.body.valor\r\n    };\r\n    \r\n    const result = await Especificacion.update(req.params.id, especificacion);\r\n    if (result === 0) {\r\n      return res.status(404).json({ message: 'Especificación no encontrada' });\r\n    }\r\n    res.status(200).json({ id: req.params.id, ...especificacion });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error al actualizar la especificación' });\r\n  }\r\n};\r\n\r\nexports.deleteEspecificacion = async (req, res) => {\r\n  try {\r\n    const result = await Especificacion.delete(req.params.id);\r\n    if (result === 0) {\r\n      return res.status(404).json({ message: 'Especificación no encontrada' });\r\n    }\r\n    res.status(200).json({ message: 'Especificación eliminada correctamente' });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error al eliminar la especificación' });\r\n  }\r\n};",
      "imagenes.controller.js": "const Imagen = require('../models/imagen.model');\r\n\r\nexports.getImagenesByProducto = async (req, res) => {\r\n  try {\r\n    const imagenes = await Imagen.getByProducto(req.params.productoId);\r\n    res.status(200).json(imagenes);\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error al obtener imágenes del producto' });\r\n  }\r\n};\r\n\r\nexports.getImagenById = async (req, res) => {\r\n  try {\r\n    const imagen = await Imagen.getById(req.params.id);\r\n    if (!imagen) {\r\n      return res.status(404).json({ message: 'Imagen no encontrada' });\r\n    }\r\n    res.status(200).json(imagen);\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error al obtener la imagen' });\r\n  }\r\n};\r\n\r\nexports.createImagen = async (req, res) => {\r\n  try {\r\n    // Validación básica\r\n    if (!req.body.url || !req.params.productoId) {\r\n      return res.status(400).json({ message: 'La URL y el ID del producto son obligatorios' });\r\n    }\r\n    \r\n    // Asegúrate de que el producto_id se asigne correctamente\r\n    const imagen = {\r\n      ...req.body,\r\n      producto_id: req.params.productoId\r\n    };\r\n    \r\n    const id = await Imagen.create(imagen);\r\n    res.status(201).json({ id, ...imagen });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error al crear la imagen' });\r\n  }\r\n};\r\n\r\nexports.updateImagen = async (req, res) => {\r\n  try {\r\n    // Validación básica\r\n    if (!req.body.url) {\r\n      return res.status(400).json({ message: 'La URL es obligatoria' });\r\n    }\r\n    \r\n    // Asegúrate de que el producto_id se asigne correctamente\r\n    const imagen = {\r\n      ...req.body,\r\n      producto_id: req.params.productoId\r\n    };\r\n    \r\n    const result = await Imagen.update(req.params.id, imagen);\r\n    if (result === 0) {\r\n      return res.status(404).json({ message: 'Imagen no encontrada' });\r\n    }\r\n    res.status(200).json({ id: req.params.id, ...imagen });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error al actualizar la imagen' });\r\n  }\r\n};\r\n\r\nexports.deleteImagen = async (req, res) => {\r\n  try {\r\n    const result = await Imagen.delete(req.params.id);\r\n    if (result === 0) {\r\n      return res.status(404).json({ message: 'Imagen no encontrada' });\r\n    }\r\n    res.status(200).json({ message: 'Imagen eliminada correctamente' });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error al eliminar la imagen' });\r\n  }\r\n};",
      "marcas.controller.js": "const Marca = require('../models/marca.model');\r\n\r\nexports.getAllMarcas = async (req, res) => {\r\n  try {\r\n    const marcas = await Marca.getAll();\r\n    res.status(200).json(marcas);\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error al obtener marcas' });\r\n  }\r\n};\r\n\r\nexports.getMarcaById = async (req, res) => {\r\n  try {\r\n    const marca = await Marca.getById(req.params.id);\r\n    if (!marca) {\r\n      return res.status(404).json({ message: 'Marca no encontrada' });\r\n    }\r\n    res.status(200).json(marca);\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error al obtener la marca' });\r\n  }\r\n};\r\n\r\nexports.createMarca = async (req, res) => {\r\n  try {\r\n    // Validación básica\r\n    if (!req.body.nombre) {\r\n      return res.status(400).json({ message: 'El nombre es obligatorio' });\r\n    }\r\n    \r\n    const id = await Marca.create(req.body);\r\n    res.status(201).json({ id, ...req.body });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error al crear la marca' });\r\n  }\r\n};\r\n\r\nexports.updateMarca = async (req, res) => {\r\n  try {\r\n    // Validación básica\r\n    if (!req.body.nombre) {\r\n      return res.status(400).json({ message: 'El nombre es obligatorio' });\r\n    }\r\n    \r\n    const result = await Marca.update(req.params.id, req.body);\r\n    if (result === 0) {\r\n      return res.status(404).json({ message: 'Marca no encontrada' });\r\n    }\r\n    res.status(200).json({ id: req.params.id, ...req.body });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error al actualizar la marca' });\r\n  }\r\n};\r\n\r\nexports.deleteMarca = async (req, res) => {\r\n  try {\r\n    const result = await Marca.delete(req.params.id);\r\n    if (result === 0) {\r\n      return res.status(404).json({ message: 'Marca no encontrada' });\r\n    }\r\n    res.status(200).json({ message: 'Marca eliminada correctamente' });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error al eliminar la marca' });\r\n  }\r\n};",
      "productos.controller.js": "const Producto = require('../models/producto.model');\r\n\r\nexports.getAllProductos = async (req, res) => {\r\n  try {\r\n    const page = parseInt(req.query.page) || 1;\r\n    const limit = parseInt(req.query.limit) || 10;\r\n    \r\n    const resultado = await Producto.getAll(page, limit);\r\n    res.status(200).json(resultado);\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error al obtener productos' });\r\n  }\r\n};\r\n\r\nexports.getProductoById = async (req, res) => {\r\n  try {\r\n    const producto = await Producto.getById(req.params.id);\r\n    if (!producto) {\r\n      return res.status(404).json({ message: 'Producto no encontrado' });\r\n    }\r\n    res.status(200).json(producto);\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error al obtener el producto' });\r\n  }\r\n};\r\n\r\nexports.getProductosByCategoria = async (req, res) => {\r\n  try {\r\n    const page = parseInt(req.query.page) || 1;\r\n    const limit = parseInt(req.query.limit) || 10;\r\n    \r\n    const resultado = await Producto.getByCategoria(req.params.categoriaId, page, limit);\r\n    res.status(200).json(resultado);\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error al obtener productos por categoría' });\r\n  }\r\n};\r\n\r\nexports.getProductosBySubcategoria = async (req, res) => {\r\n  try {\r\n    const page = parseInt(req.query.page) || 1;\r\n    const limit = parseInt(req.query.limit) || 10;\r\n    \r\n    const resultado = await Producto.getBySubcategoria(req.params.subcategoriaId, page, limit);\r\n    res.status(200).json(resultado);\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error al obtener productos por subcategoría' });\r\n  }\r\n};\r\n\r\nexports.getProductosByMarca = async (req, res) => {\r\n  try {\r\n    const page = parseInt(req.query.page) || 1;\r\n    const limit = parseInt(req.query.limit) || 10;\r\n    \r\n    const resultado = await Producto.getByMarca(req.params.marcaId, page, limit);\r\n    res.status(200).json(resultado);\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error al obtener productos por marca' });\r\n  }\r\n};\r\n\r\nexports.getProductosDestacados = async (req, res) => {\r\n  try {\r\n    const limit = parseInt(req.query.limit) || 10;\r\n    const productos = await Producto.getDestacados(limit);\r\n    res.status(200).json(productos);\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error al obtener productos destacados' });\r\n  }\r\n};\r\n\r\nexports.getProductosNuevos = async (req, res) => {\r\n  try {\r\n    const limit = parseInt(req.query.limit) || 10;\r\n    const productos = await Producto.getNuevos(limit);\r\n    res.status(200).json(productos);\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error al obtener productos nuevos' });\r\n  }\r\n};\r\n\r\nexports.buscarProductos = async (req, res) => {\r\n  try {\r\n    const termino = req.query.q;\r\n    if (!termino) {\r\n      return res.status(400).json({ message: 'Es necesario proporcionar un término de búsqueda' });\r\n    }\r\n    \r\n    const page = parseInt(req.query.page) || 1;\r\n    const limit = parseInt(req.query.limit) || 10;\r\n    \r\n    const resultado = await Producto.buscar(termino, page, limit);\r\n    res.status(200).json(resultado);\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error al buscar productos' });\r\n  }\r\n};\r\n\r\nexports.createProducto = async (req, res) => {\r\n  try {\r\n    // Validación básica\r\n    if (!req.body.nombre || !req.body.codigo || !req.body.precio || !req.body.categoria_id) {\r\n      return res.status(400).json({ \r\n        message: 'El nombre, código, precio y categoria_id son obligatorios' \r\n      });\r\n    }\r\n    \r\n    const id = await Producto.create(req.body);\r\n    res.status(201).json({ id, ...req.body });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error al crear el producto' });\r\n  }\r\n};\r\n\r\nexports.updateProducto = async (req, res) => {\r\n  try {\r\n    // Validación básica\r\n    if (!req.body.nombre || !req.body.codigo || !req.body.precio || !req.body.categoria_id) {\r\n      return res.status(400).json({ \r\n        message: 'El nombre, código, precio y categoria_id son obligatorios' \r\n      });\r\n    }\r\n    \r\n    const result = await Producto.update(req.params.id, req.body);\r\n    if (result === 0) {\r\n      return res.status(404).json({ message: 'Producto no encontrado' });\r\n    }\r\n    res.status(200).json({ id: req.params.id, ...req.body });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error al actualizar el producto' });\r\n  }\r\n};\r\n\r\nexports.deleteProducto = async (req, res) => {\r\n  try {\r\n    const result = await Producto.delete(req.params.id);\r\n    if (result === 0) {\r\n      return res.status(404).json({ message: 'Producto no encontrado' });\r\n    }\r\n    res.status(200).json({ message: 'Producto eliminado correctamente' });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error al eliminar el producto' });\r\n  }\r\n};",
      "subcategorias.controller.js": "const Subcategoria = require('../models/subcategoria.model');\r\n\r\nexports.getAllSubcategorias = async (req, res) => {\r\n  try {\r\n    const subcategorias = await Subcategoria.getAll();\r\n    res.status(200).json(subcategorias);\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error al obtener subcategorías' });\r\n  }\r\n};\r\n\r\nexports.getSubcategoriaById = async (req, res) => {\r\n  try {\r\n    const subcategoria = await Subcategoria.getById(req.params.id);\r\n    if (!subcategoria) {\r\n      return res.status(404).json({ message: 'Subcategoría no encontrada' });\r\n    }\r\n    res.status(200).json(subcategoria);\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error al obtener la subcategoría' });\r\n  }\r\n};\r\n\r\nexports.getSubcategoriasByCategoria = async (req, res) => {\r\n  try {\r\n    const subcategorias = await Subcategoria.getByCategoria(req.params.categoriaId);\r\n    res.status(200).json(subcategorias);\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error al obtener subcategorías por categoría' });\r\n  }\r\n};\r\n\r\nexports.createSubcategoria = async (req, res) => {\r\n  try {\r\n    // Validación básica\r\n    if (!req.body.nombre || !req.body.slug || !req.body.categoria_id) {\r\n      return res.status(400).json({ \r\n        message: 'El nombre, slug y categoria_id son obligatorios' \r\n      });\r\n    }\r\n    \r\n    const id = await Subcategoria.create(req.body);\r\n    res.status(201).json({ id, ...req.body });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error al crear la subcategoría' });\r\n  }\r\n};\r\n\r\nexports.updateSubcategoria = async (req, res) => {\r\n  try {\r\n    // Validación básica\r\n    if (!req.body.nombre || !req.body.slug || !req.body.categoria_id) {\r\n      return res.status(400).json({ \r\n        message: 'El nombre, slug y categoria_id son obligatorios' \r\n      });\r\n    }\r\n    \r\n    const result = await Subcategoria.update(req.params.id, req.body);\r\n    if (result === 0) {\r\n      return res.status(404).json({ message: 'Subcategoría no encontrada' });\r\n    }\r\n    res.status(200).json({ id: req.params.id, ...req.body });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error al actualizar la subcategoría' });\r\n  }\r\n};\r\n\r\nexports.deleteSubcategoria = async (req, res) => {\r\n  try {\r\n    const result = await Subcategoria.delete(req.params.id);\r\n    if (result === 0) {\r\n      return res.status(404).json({ message: 'Subcategoría no encontrada' });\r\n    }\r\n    res.status(200).json({ message: 'Subcategoría eliminada correctamente' });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error al eliminar la subcategoría' });\r\n  }\r\n};"
    },
    "index.js": "const express = require('express');\r\nconst cors = require('cors');\r\nrequire('dotenv').config();\r\n\r\nconst app = express();\r\nconst port = process.env.PORT || 3000;\r\n\r\n// Middlewares\r\napp.use(cors());\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: true }));\r\n\r\n// Rutas básicas\r\napp.get('/', (req, res) => {\r\n  res.json({ \r\n    message: 'API de productos funcionando correctamente',\r\n    version: '1.0.0'\r\n  });\r\n});\r\n\r\n// Importar rutas\r\nconst categoriasRoutes = require('./routes/categorias.routes');\r\nconst subcategoriasRoutes = require('./routes/subcategorias.routes');\r\nconst marcasRoutes = require('./routes/marcas.routes');\r\nconst productosRoutes = require('./routes/productos.routes');\r\nconst imagenesRoutes = require('./controllers/imagenes.controller');\r\nconst especificacionesRoutes = require('./controllers/especificaciones.controller');\r\n\r\n// Rutas de la API\r\napp.use('/api/categorias', categoriasRoutes);\r\napp.use('/api/subcategorias', subcategoriasRoutes);\r\napp.use('/api/marcas', marcasRoutes);\r\napp.use('/api/productos', productosRoutes);\r\n\r\n// Rutas anidadas para imágenes y especificaciones\r\napp.use('/api/productos/:productoId/imagenes', (req, res, next) => {\r\n  // Middleware para pasar el productoId a los controladores\r\n  req.productoId = req.params.productoId;\r\n  next();\r\n}, require('./routes/imagenes.routes'));\r\n\r\napp.use('/api/productos/:productoId/especificaciones', (req, res, next) => {\r\n  // Middleware para pasar el productoId a los controladores\r\n  req.productoId = req.params.productoId;\r\n  next();\r\n}, require('./routes/especificaciones.routes'));\r\n\r\n// Rutas adicionales para las relaciones entre entidades\r\napp.get('/api/categorias/:categoriaId/subcategorias', \r\n  require('./controllers/subcategorias.controller').getSubcategoriasByCategoria);\r\n\r\napp.get('/api/categorias/:categoriaId/productos', \r\n  require('./controllers/productos.controller').getProductosByCategoria);\r\n\r\napp.get('/api/subcategorias/:subcategoriaId/productos', \r\n  require('./controllers/productos.controller').getProductosBySubcategoria);\r\n\r\napp.get('/api/marcas/:marcaId/productos', \r\n  require('./controllers/productos.controller').getProductosByMarca);\r\n\r\n// Middleware para manejo de errores 404\r\napp.use((req, res) => {\r\n  res.status(404).json({ message: 'Ruta no encontrada' });\r\n});\r\n\r\n// Iniciar servidor\r\napp.listen(port, () => {\r\n  console.log(`Servidor corriendo en http://localhost:${port}`);\r\n});",
    "middleware": {
      "validacion.js": ""
    },
    "models": {
      "categoria.model.js": "const pool = require('../config/database');\r\n\r\nclass Categoria {\r\n  static async getAll() {\r\n    const [rows] = await pool.query('SELECT * FROM categorias WHERE activo = TRUE ORDER BY orden');\r\n    return rows;\r\n  }\r\n  \r\n  static async getById(id) {\r\n    const [rows] = await pool.query('SELECT * FROM categorias WHERE id = ?', [id]);\r\n    return rows[0];\r\n  }\r\n  \r\n  static async create(categoria) {\r\n    const [result] = await pool.query(\r\n      'INSERT INTO categorias (nombre, descripcion, imagen, slug, orden) VALUES (?, ?, ?, ?, ?)',\r\n      [categoria.nombre, categoria.descripcion, categoria.imagen, categoria.slug, categoria.orden || 0]\r\n    );\r\n    return result.insertId;\r\n  }\r\n  \r\n  static async update(id, categoria) {\r\n    const [result] = await pool.query(\r\n      'UPDATE categorias SET nombre = ?, descripcion = ?, imagen = ?, slug = ?, orden = ?, activo = ? WHERE id = ?',\r\n      [\r\n        categoria.nombre, \r\n        categoria.descripcion, \r\n        categoria.imagen, \r\n        categoria.slug, \r\n        categoria.orden || 0, \r\n        categoria.activo !== undefined ? categoria.activo : true, \r\n        id\r\n      ]\r\n    );\r\n    return result.affectedRows;\r\n  }\r\n  \r\n  static async delete(id) {\r\n    const [result] = await pool.query('DELETE FROM categorias WHERE id = ?', [id]);\r\n    return result.affectedRows;\r\n  }\r\n}\r\n\r\nmodule.exports = Categoria;",
      "especificacion.model.js": "const pool = require('../config/database');\r\n\r\nclass Especificacion {\r\n  static async getByProducto(productoId) {\r\n    const [rows] = await pool.query(\r\n      'SELECT * FROM especificaciones_producto WHERE producto_id = ?',\r\n      [productoId]\r\n    );\r\n    return rows;\r\n  }\r\n  \r\n  static async getById(id) {\r\n    const [rows] = await pool.query('SELECT * FROM especificaciones_producto WHERE id = ?', [id]);\r\n    return rows[0];\r\n  }\r\n  \r\n  static async create(especificacion) {\r\n    const [result] = await pool.query(\r\n      'INSERT INTO especificaciones_producto (producto_id, nombre, valor) VALUES (?, ?, ?)',\r\n      [\r\n        especificacion.producto_id,\r\n        especificacion.nombre,\r\n        especificacion.valor\r\n      ]\r\n    );\r\n    return result.insertId;\r\n  }\r\n  \r\n  static async update(id, especificacion) {\r\n    const [result] = await pool.query(\r\n      'UPDATE especificaciones_producto SET nombre = ?, valor = ? WHERE id = ?',\r\n      [especificacion.nombre, especificacion.valor, id]\r\n    );\r\n    return result.affectedRows;\r\n  }\r\n  \r\n  static async delete(id) {\r\n    const [result] = await pool.query('DELETE FROM especificaciones_producto WHERE id = ?', [id]);\r\n    return result.affectedRows;\r\n  }\r\n}\r\n\r\nmodule.exports = Especificacion;",
      "imagen.model.js": "const pool = require('../config/database');\r\n\r\nclass Imagen {\r\n  static async getByProducto(productoId) {\r\n    const [rows] = await pool.query(\r\n      'SELECT * FROM imagenes_producto WHERE producto_id = ? ORDER BY orden, es_principal DESC',\r\n      [productoId]\r\n    );\r\n    return rows;\r\n  }\r\n  \r\n  static async getById(id) {\r\n    const [rows] = await pool.query('SELECT * FROM imagenes_producto WHERE id = ?', [id]);\r\n    return rows[0];\r\n  }\r\n  \r\n  static async create(imagen) {\r\n    // Si es_principal=true, actualizar otras imágenes a es_principal=false\r\n    if (imagen.es_principal) {\r\n      await pool.query(\r\n        'UPDATE imagenes_producto SET es_principal = FALSE WHERE producto_id = ?',\r\n        [imagen.producto_id]\r\n      );\r\n    }\r\n    \r\n    const [result] = await pool.query(\r\n      'INSERT INTO imagenes_producto (producto_id, url, orden, es_principal) VALUES (?, ?, ?, ?)',\r\n      [\r\n        imagen.producto_id,\r\n        imagen.url,\r\n        imagen.orden || 0,\r\n        imagen.es_principal || false\r\n      ]\r\n    );\r\n    return result.insertId;\r\n  }\r\n  \r\n  static async update(id, imagen) {\r\n    // Si es_principal=true, actualizar otras imágenes a es_principal=false\r\n    if (imagen.es_principal) {\r\n      await pool.query(\r\n        'UPDATE imagenes_producto SET es_principal = FALSE WHERE producto_id = ? AND id != ?',\r\n        [imagen.producto_id, id]\r\n      );\r\n    }\r\n    \r\n    const [result] = await pool.query(\r\n      'UPDATE imagenes_producto SET url = ?, orden = ?, es_principal = ? WHERE id = ?',\r\n      [imagen.url, imagen.orden || 0, imagen.es_principal || false, id]\r\n    );\r\n    return result.affectedRows;\r\n  }\r\n  \r\n  static async delete(id) {\r\n    const [result] = await pool.query('DELETE FROM imagenes_producto WHERE id = ?', [id]);\r\n    return result.affectedRows;\r\n  }\r\n}\r\n\r\nmodule.exports = Imagen;",
      "marca.model.js": "const pool = require('../config/database');\r\n\r\nclass Marca {\r\n  static async getAll() {\r\n    const [rows] = await pool.query('SELECT * FROM marcas WHERE activo = TRUE');\r\n    return rows;\r\n  }\r\n  \r\n  static async getById(id) {\r\n    const [rows] = await pool.query('SELECT * FROM marcas WHERE id = ?', [id]);\r\n    return rows[0];\r\n  }\r\n  \r\n  static async create(marca) {\r\n    const [result] = await pool.query(\r\n      'INSERT INTO marcas (nombre, logo, descripcion) VALUES (?, ?, ?)',\r\n      [marca.nombre, marca.logo, marca.descripcion]\r\n    );\r\n    return result.insertId;\r\n  }\r\n  \r\n  static async update(id, marca) {\r\n    const [result] = await pool.query(\r\n      'UPDATE marcas SET nombre = ?, logo = ?, descripcion = ?, activo = ? WHERE id = ?',\r\n      [\r\n        marca.nombre, \r\n        marca.logo, \r\n        marca.descripcion, \r\n        marca.activo !== undefined ? marca.activo : true, \r\n        id\r\n      ]\r\n    );\r\n    return result.affectedRows;\r\n  }\r\n  \r\n  static async delete(id) {\r\n    const [result] = await pool.query('DELETE FROM marcas WHERE id = ?', [id]);\r\n    return result.affectedRows;\r\n  }\r\n}\r\n\r\nmodule.exports = Marca;",
      "producto.model.js": "const pool = require('../config/database');\r\n\r\nclass Producto {\r\n  static async getAll(page = 1, limit = 10) {\r\n    const offset = (page - 1) * limit;\r\n    const [rows] = await pool.query(\r\n      'SELECT * FROM productos WHERE activo = TRUE LIMIT ? OFFSET ?',\r\n      [limit, offset]\r\n    );\r\n    \r\n    const [countResult] = await pool.query('SELECT COUNT(*) as total FROM productos WHERE activo = TRUE');\r\n    const total = countResult[0].total;\r\n    \r\n    return {\r\n      productos: rows,\r\n      pagination: {\r\n        total,\r\n        page,\r\n        limit,\r\n        totalPages: Math.ceil(total / limit)\r\n      }\r\n    };\r\n  }\r\n  \r\n  static async getById(id) {\r\n    const [rows] = await pool.query('SELECT * FROM productos WHERE id = ?', [id]);\r\n    return rows[0];\r\n  }\r\n  \r\n  static async getByCategoria(categoriaId, page = 1, limit = 10) {\r\n    const offset = (page - 1) * limit;\r\n    const [rows] = await pool.query(\r\n      'SELECT * FROM productos WHERE categoria_id = ? AND activo = TRUE LIMIT ? OFFSET ?',\r\n      [categoriaId, limit, offset]\r\n    );\r\n    \r\n    const [countResult] = await pool.query(\r\n      'SELECT COUNT(*) as total FROM productos WHERE categoria_id = ? AND activo = TRUE',\r\n      [categoriaId]\r\n    );\r\n    const total = countResult[0].total;\r\n    \r\n    return {\r\n      productos: rows,\r\n      pagination: {\r\n        total,\r\n        page,\r\n        limit,\r\n        totalPages: Math.ceil(total / limit)\r\n      }\r\n    };\r\n  }\r\n  \r\n  static async getBySubcategoria(subcategoriaId, page = 1, limit = 10) {\r\n    const offset = (page - 1) * limit;\r\n    const [rows] = await pool.query(\r\n      'SELECT * FROM productos WHERE subcategoria_id = ? AND activo = TRUE LIMIT ? OFFSET ?',\r\n      [subcategoriaId, limit, offset]\r\n    );\r\n    \r\n    const [countResult] = await pool.query(\r\n      'SELECT COUNT(*) as total FROM productos WHERE subcategoria_id = ? AND activo = TRUE',\r\n      [subcategoriaId]\r\n    );\r\n    const total = countResult[0].total;\r\n    \r\n    return {\r\n      productos: rows,\r\n      pagination: {\r\n        total,\r\n        page,\r\n        limit,\r\n        totalPages: Math.ceil(total / limit)\r\n      }\r\n    };\r\n  }\r\n  \r\n  static async getByMarca(marcaId, page = 1, limit = 10) {\r\n    const offset = (page - 1) * limit;\r\n    const [rows] = await pool.query(\r\n      'SELECT * FROM productos WHERE marca_id = ? AND activo = TRUE LIMIT ? OFFSET ?',\r\n      [marcaId, limit, offset]\r\n    );\r\n    \r\n    const [countResult] = await pool.query(\r\n      'SELECT COUNT(*) as total FROM productos WHERE marca_id = ? AND activo = TRUE',\r\n      [marcaId]\r\n    );\r\n    const total = countResult[0].total;\r\n    \r\n    return {\r\n      productos: rows,\r\n      pagination: {\r\n        total,\r\n        page,\r\n        limit,\r\n        totalPages: Math.ceil(total / limit)\r\n      }\r\n    };\r\n  }\r\n  \r\n  static async getDestacados(limit = 10) {\r\n    const [rows] = await pool.query(\r\n      'SELECT * FROM productos WHERE destacado = TRUE AND activo = TRUE LIMIT ?',\r\n      [limit]\r\n    );\r\n    return rows;\r\n  }\r\n  \r\n  static async getNuevos(limit = 10) {\r\n    const [rows] = await pool.query(\r\n      'SELECT * FROM productos WHERE nuevo = TRUE AND activo = TRUE LIMIT ?',\r\n      [limit]\r\n    );\r\n    return rows;\r\n  }\r\n  \r\n  static async buscar(termino, page = 1, limit = 10) {\r\n    const offset = (page - 1) * limit;\r\n    const searchTerm = `%${termino}%`;\r\n    \r\n    const [rows] = await pool.query(\r\n      'SELECT * FROM productos WHERE (nombre LIKE ? OR descripcion LIKE ? OR codigo LIKE ?) AND activo = TRUE LIMIT ? OFFSET ?',\r\n      [searchTerm, searchTerm, searchTerm, limit, offset]\r\n    );\r\n    \r\n    const [countResult] = await pool.query(\r\n      'SELECT COUNT(*) as total FROM productos WHERE (nombre LIKE ? OR descripcion LIKE ? OR codigo LIKE ?) AND activo = TRUE',\r\n      [searchTerm, searchTerm, searchTerm]\r\n    );\r\n    const total = countResult[0].total;\r\n    \r\n    return {\r\n      productos: rows,\r\n      pagination: {\r\n        total,\r\n        page,\r\n        limit,\r\n        totalPages: Math.ceil(total / limit)\r\n      }\r\n    };\r\n  }\r\n  \r\n  static async create(producto) {\r\n    const [result] = await pool.query(\r\n      `INSERT INTO productos (\r\n        codigo, nombre, descripcion, precio, precio_oferta, \r\n        marca_id, categoria_id, subcategoria_id, destacado, nuevo\r\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,\r\n      [\r\n        producto.codigo,\r\n        producto.nombre,\r\n        producto.descripcion,\r\n        producto.precio,\r\n        producto.precio_oferta,\r\n        producto.marca_id,\r\n        producto.categoria_id,\r\n        producto.subcategoria_id,\r\n        producto.destacado || false,\r\n        producto.nuevo || false\r\n      ]\r\n    );\r\n    return result.insertId;\r\n  }\r\n  \r\n  static async update(id, producto) {\r\n    const [result] = await pool.query(\r\n      `UPDATE productos SET \r\n        codigo = ?, nombre = ?, descripcion = ?, precio = ?, precio_oferta = ?,\r\n        marca_id = ?, categoria_id = ?, subcategoria_id = ?, \r\n        destacado = ?, nuevo = ?, activo = ?\r\n      WHERE id = ?`,\r\n      [\r\n        producto.codigo,\r\n        producto.nombre,\r\n        producto.descripcion,\r\n        producto.precio,\r\n        producto.precio_oferta,\r\n        producto.marca_id,\r\n        producto.categoria_id,\r\n        producto.subcategoria_id,\r\n        producto.destacado !== undefined ? producto.destacado : false,\r\n        producto.nuevo !== undefined ? producto.nuevo : false,\r\n        producto.activo !== undefined ? producto.activo : true,\r\n        id\r\n      ]\r\n    );\r\n    return result.affectedRows;\r\n  }\r\n  \r\n  static async delete(id) {\r\n    const [result] = await pool.query('DELETE FROM productos WHERE id = ?', [id]);\r\n    return result.affectedRows;\r\n  }\r\n}\r\n\r\nmodule.exports = Producto;",
      "subcategoria.model.js": "const pool = require('../config/database');\r\n\r\nclass Subcategoria {\r\n  static async getAll() {\r\n    const [rows] = await pool.query('SELECT * FROM subcategorias WHERE activo = TRUE ORDER BY orden');\r\n    return rows;\r\n  }\r\n  \r\n  static async getById(id) {\r\n    const [rows] = await pool.query('SELECT * FROM subcategorias WHERE id = ?', [id]);\r\n    return rows[0];\r\n  }\r\n  \r\n  static async getByCategoria(categoriaId) {\r\n    const [rows] = await pool.query(\r\n      'SELECT * FROM subcategorias WHERE categoria_id = ? AND activo = TRUE ORDER BY orden',\r\n      [categoriaId]\r\n    );\r\n    return rows;\r\n  }\r\n  \r\n  static async create(subcategoria) {\r\n    const [result] = await pool.query(\r\n      'INSERT INTO subcategorias (categoria_id, nombre, descripcion, imagen, slug, orden) VALUES (?, ?, ?, ?, ?, ?)',\r\n      [\r\n        subcategoria.categoria_id,\r\n        subcategoria.nombre,\r\n        subcategoria.descripcion,\r\n        subcategoria.imagen,\r\n        subcategoria.slug,\r\n        subcategoria.orden || 0\r\n      ]\r\n    );\r\n    return result.insertId;\r\n  }\r\n  \r\n  static async update(id, subcategoria) {\r\n    const [result] = await pool.query(\r\n      'UPDATE subcategorias SET categoria_id = ?, nombre = ?, descripcion = ?, imagen = ?, slug = ?, orden = ?, activo = ? WHERE id = ?',\r\n      [\r\n        subcategoria.categoria_id,\r\n        subcategoria.nombre,\r\n        subcategoria.descripcion,\r\n        subcategoria.imagen,\r\n        subcategoria.slug,\r\n        subcategoria.orden || 0,\r\n        subcategoria.activo !== undefined ? subcategoria.activo : true,\r\n        id\r\n      ]\r\n    );\r\n    return result.affectedRows;\r\n  }\r\n  \r\n  static async delete(id) {\r\n    const [result] = await pool.query('DELETE FROM subcategorias WHERE id = ?', [id]);\r\n    return result.affectedRows;\r\n  }\r\n}\r\n\r\nmodule.exports = Subcategoria;"
    },
    "routes": {
      "categorias.routes.js": "const express = require('express');\r\nconst router = express.Router();\r\nconst categoriasController = require('../controllers/categorias.controller');\r\n\r\nrouter.get('/', categoriasController.getAllCategorias);\r\nrouter.get('/:id', categoriasController.getCategoriaById);\r\nrouter.post('/', categoriasController.createCategoria);\r\nrouter.put('/:id', categoriasController.updateCategoria);\r\nrouter.delete('/:id', categoriasController.deleteCategoria);\r\n\r\nmodule.exports = router;",
      "especificaciones.routes.js": "const express = require('express');\r\nconst router = express.Router();\r\nconst especificacionesController = require('../controllers/especificaciones.controller');\r\n\r\n// Estas rutas son relativas a /api/productos/:productoId/especificaciones\r\nrouter.get('/', especificacionesController.getEspecificacionesByProducto);\r\nrouter.post('/', especificacionesController.createEspecificacion);\r\nrouter.get('/:id', especificacionesController.getEspecificacionById);\r\nrouter.put('/:id', especificacionesController.updateEspecificacion);\r\nrouter.delete('/:id', especificacionesController.deleteEspecificacion);\r\n\r\nmodule.exports = router;",
      "imagenes.routes.js": "const express = require('express');\r\nconst router = express.Router();\r\nconst imagenesController = require('../controllers/imagenes.controller');\r\n\r\n// Estas rutas son relativas a /api/productos/:productoId/imagenes\r\nrouter.get('/', imagenesController.getImagenesByProducto);\r\nrouter.post('/', imagenesController.createImagen);\r\nrouter.get('/:id', imagenesController.getImagenById);\r\nrouter.put('/:id', imagenesController.updateImagen);\r\nrouter.delete('/:id', imagenesController.deleteImagen);\r\n\r\nmodule.exports = router;",
      "marcas.routes.js": "const express = require('express');\r\nconst router = express.Router();\r\nconst marcasController = require('../controllers/marcas.controller');\r\n\r\nrouter.get('/', marcasController.getAllMarcas);\r\nrouter.get('/:id', marcasController.getMarcaById);\r\nrouter.post('/', marcasController.createMarca);\r\nrouter.put('/:id', marcasController.updateMarca);\r\nrouter.delete('/:id', marcasController.deleteMarca);\r\n\r\nmodule.exports = router;",
      "productos.routes.js": "const express = require('express');\r\nconst router = express.Router();\r\nconst productosController = require('../controllers/productos.controller');\r\n\r\nrouter.get('/', productosController.getAllProductos);\r\nrouter.get('/destacados', productosController.getProductosDestacados);\r\nrouter.get('/nuevos', productosController.getProductosNuevos);\r\nrouter.get('/buscar', productosController.buscarProductos);\r\nrouter.get('/:id', productosController.getProductoById);\r\nrouter.post('/', productosController.createProducto);\r\nrouter.put('/:id', productosController.updateProducto);\r\nrouter.delete('/:id', productosController.deleteProducto);\r\n\r\nmodule.exports = router;",
      "subcategorias.routes.js": "const express = require('express');\r\nconst router = express.Router();\r\nconst subcategoriasController = require('../controllers/subcategorias.controller');\r\n\r\nrouter.get('/', subcategoriasController.getAllSubcategorias);\r\nrouter.get('/:id', subcategoriasController.getSubcategoriaById);\r\nrouter.post('/', subcategoriasController.createSubcategoria);\r\nrouter.put('/:id', subcategoriasController.updateSubcategoria);\r\nrouter.delete('/:id', subcategoriasController.deleteSubcategoria);\r\n\r\nmodule.exports = router;"
    }
  }
}